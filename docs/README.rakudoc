=begin pod

=head1 NAME

File::Find - Get a lazy list of a directory tree

=head1 SYNOPSIS

=begin code
use File::Find;

# recursively (and eagerly) find all files from the 'foo' directory
my @list = find(dir => 'foo');
say @list[0..3];

# the same as above, but lazily return the results
my $list = find(dir => 'foo');
say $list[0..3];

# eagerly find all Perl-related files from the current directory
my @perl-files = find(dir => '.', name => / "." p [l||m] $ /);

# lazily find all directories within the 'rakudo' directory
my $rakudo-dirs = find(dir => 'rakudo', type => 'dir');

# lazily find all symlinks a normal user can access under `/etc`
my $etc-symlinks = find(dir => '/etc/', type => 'symlink', keep-going => True);
=end code

=head1 DESCRIPTION

C<File::Find> allows you to get the contents of the given directory,
recursively, depth first.

The only exported function, C<find()> , generates a lazy
list of files in given directory. Every element of the list is an
C<IO::Path> object, described below.

C<find()> takes one (or more) named arguments. The C<dir> argument
is mandatory, and sets the directory C<find()> will traverse.

There are also a few named arguments. If more than one is passed,
all of them must match for a file to be returned.

=head2 name

Specify a name of the file C<File::Find> is ought to look for. If you
pass a string here, C<find()> will return only the files with the
given name. When passing a regex, only the files with path matching
the pattern will be returned. Any other type of argument passed here
will just be smartmatched against the path (which is exactly what
happens to regexes passed, by the way).

=head2 type

Given a type, C<find()> will only return files being the given type.
The available types are C<file>, C<dir>, or C<symlink>.

=head2 exclude

Specify a regex (or any other smartmatchable type) to exclude files /
directories from the search.

=head2 recursive

By default, C<find> will recursively traverse a directory tree, descending
into any subdirectories it finds. This behavior can be changed by setting
C<recursive> to a false value. In this case, only the first-level entries
will be processed.

=head2 keep-going

Parameter C<keep-going> tells C<find()> to not stop finding files
on errors such as 'Access is denied', but rather ignore the errors
and keep going.

B<Note: This parameter is currently broken and does not affect the search
in any way.>

=head1 Perl's File::Find

Please note that this module is not trying to be the verbatim port of
Perl's File::Find module. Its interface is closer to Perl's
File::Find::Rule, and its features are planned to be similar one day.

=head1 CAVEATS

List assignment is eager in Raku, so if you assign C<find()>'s result
to an array, the elements will be copied and the laziness will be
spoiled. 
For a proper lazy list, use either binding (C<:=>) or assign a result to a scalar value
(see SYNOPSIS).

=end pod
